# Tyler Echols
# Assignment 3 
# CS 2340.004 - Computer Architecture - F20
# Karen Mazidi
########################################################################################
# - read the input file “input.txt” into a buffer in memory
# - extract the string “numbers”, convert them to integers and store in an array
# - print the integers to console
# - sort the integers in place using selection sort
# - print the sorted integers to console
# - calculate the mean, median, and standard deviation, printing results to the console
######################################################################################## 

.data 
arr:	.space	80 	# address of array 
len:	.word	20 	# length 
mean:	.float	0.0 	# address of mean
median:	.word	0	# address of mean 
sd:	.float	0.0	# address of standard deviation
fname:	.asciiz	"input.txt" # address of file name
	.align	2
buff:	.space	80 # buff = Buffer, address of buffer
msg_1: 	.asciiz "\n Array BEFORE: \t" 
msg_2: 	.asciiz	"\n Array AFTER: \t" 
msg_3:	.asciiz	"\n The MEAN of the Array is: \t" 
msg_4:	.asciiz	"\n The MEDIAN of the Array is: \t" 
msg_5: 	.asciiz	"\n The STANDARD DEVIATION of the Array is: \t"
msg_6:	.asciiz	"\n ERROR IN FILE READING. CLOSING PROGRAM." 

.text 

main: 
##################### Instruction 1 #################################
	la   	$a0, fname     	# input file name, set file name as $a0
	la   	$a1, buff     	# address of buffer to read into
	jal	read		# reads from file  
		
	
############################################################################################################################################
  # print out string just read
 	li   	$v0, 4		# system call for print string   
  	la	$a0, buff 	# address of buffer to print string 
  	syscall
 
 
 	la 	$a0, arr 	# load address put in
	li	$a1, 20 	# 20 is the number of bytes the array can hold 
	la	$a2, buff 	# load buffer into $a2
 
 	jal	extractintegers
 	
 	la 	$a0, arr 	# load address of arr, and assign it into $a0
	li	$a1, 20 	# 20 is the number of bytes the array can hold, and in this function its assigned into $a1 
	la	$a2, buff 	# 
	
 
 	jal	printintarray
 
  # exit
  	li	$v0, 10 	# system call to exit program 
  	syscall 
  	 	
read: 
	# read in a file and saves in a buffer 
	# $a0= faile bing read 
	# $a1, buffer in use 
	
	move	$t1, $a1	# move the buffer in $a1 into $t1 
	li   	$v0, 13      	# system call for open file
  
  	li   	$a1, 0        	# Open for reading (flags are 0: read, 1: write)
	li   	$a2, 0       	# mode is ignored
  	syscall            	# open a file (file descriptor returned in $v0)
 	move 	$s6, $v0      	# save the file descriptor 
 	
############################################################################################################################################
  # read from file just opened
 	 li   	$v0, 14       	# system call for file read
 	 la 	$a0, ($s6)      # file descriptor 
 	 move	$a1,$t1		# move whatever is in $t1 into $a1  
 	 li   	$a2, 80       	# hardcoded buffer length
 	 syscall            	# read from file
	 jr	$ra		# jump return, and return address
	 

############################################################################################################################################	 	 	 	 
##################### Instruction 2 #################################

extractintegers: 
	li 	$t2, 0		# Our counter to count the numbers being loaded into the array  	  
	LoopExtInt: 
# $a0= arr address 
# $a1 = number of words than can be stored in array   
# $a2 = is the buffer read from
# $t1 = is the byte 
# $t2 = the new value converted from ASCII to int (DECEMIAL) Make sure $t2 is cleared out for next value to add into, it is also the accumulator (the counting up)  

	lb 	$t1, ($a2) 		        # loading byte from address at a1 
	
	beqz 	$t1, LoopExtIntExit		# If t1 equals 0 go to WordCountExit 
	addi	$a2, $a2, 1			# Increase Addresse by 1, so it loads new letter instead or repeating the same letter  
	
	beq  	$t1, 32, CheckingWhiteSpace  	# Checks for Space
	beq 	$t1, 10, CheckingWhiteSpace 	# Checks for new line   
	beq	$t1, 9,	 CheckingWhiteSpace 	# Checks Horizontal Tab 
	blt 	$t1, 48, Skip			# skip reading what ever is in $t1 because it's something that ASCII dosen't regonize as a number because it something LESS that's not in our number range
	bgt 	$t1, 57, Skip			## skip reading what ever is in $t1 because it's something that ASCII dosen't regonize as a number because it something MORE that's not in our number range
	
	addi 	$t1, $t1, -48 			# $t1 + -48 = new $t1 
	mul	$t2, $t2, 10    		# 10 * $t2 = new $t2
	add   	$t2, $t1, $t2 			# $t2 + $t1 = new $t2
	
	Skip:	 
	
	j 	LoopExtInt 			# jump back into loop 
 
	CheckingWhiteSpace:
	sw 	$t2, ($a0) 			# whatever is in $a0 were also gonna save it in $t2, and even though sw means save word were able to make it weard the word as a number 
	move 	$t2, $0 			# 
	add 	$a0, $a0, 4 			# ADD 4 to $a0 to make a new $a0 
	
	 j	LoopExtInt  			# Goes Back to the top of Loop1WC 
 
	 LoopExtIntExit: 
 	jr 	$ra 				# return to the return address  

	
############################################################################################################################################
##################### Instruction 3 #################################
 
 printintarray: 
 # $a0 = Array Address 
 # $a1 = Array Length 
 # $t1 = What $a0 is being loaded into 
 # $t2 = the word counter from the array 
 
 	li 	$t2, 0		# 0 (from the Array) is assigned into $t2
 	move 	$t3, $a0	# move the address of the array into $t3
 	
 	LoopPrintIntArray:						
 	bge 	$t2, $a1, LoopExtIntExit # Loop out of the print Pri
  	lw 	$t1, ($t3) 	# Whatever is being held in $t3 because the () means to hold the value in there no matter what, and load it into $t1 as well  
  	addi	$t3, $t3, 4 	# add 4 to whatever is in $t3 and combine those and make them the new $t3
  	addi	$t2, $t2, 1	# add 1 into $t2 which is the word counter from the array and combine them to make a new $t2 
  	
  	PrintArray:
  	 move 	$a0, $t1 	# whatever is the being loaded into $t1 we are putting it into the array address
  	 li 	$v0, 1  	# then we atell it to print the array 
  	 syscall
  	 
  	 # somewhere in here I gotta figure out where I need to insert a space so when it prints out the shit it don't look like one long ass number, but multiple seprate numbers
  	 # I need to remember the god damn syscall   
  	 
  	j    LoopPrintIntArray  
  
 	LoopPrintIntExit: 
 	jr 	$ra  
   
  
 
 
 
############################################################################################################################################
##################### Instruction 4 ################################# 
  
   
   
    
############################################################################################################################################           
##################### Instruction 5 ################################# 


############################################################################################################################################
##################### Instruction 6 #################################

 
  
    
 ############################################################################################################################################
##################### Instruction 7 #################################


############################################################################################################################################